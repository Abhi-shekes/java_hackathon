/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.99
 * Generated at: 2025-04-08 19:24:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chatClient_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');

    String username = (String) session.getAttribute("name"); // Get username from session
    String currentRoomId = request.getParameter("roomId");   // Get current roomId from URL

      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>Hackathon Chat</title>\n");
      out.write("    <style>\n");
      out.write("        body {\n");
      out.write("            font-family: 'Segoe UI', sans-serif;\n");
      out.write("            background-color: #eae6df;\n");
      out.write("            margin: 0;\n");
      out.write("            padding: 0;\n");
      out.write("            height: 100vh;\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: center;\n");
      out.write("            align-items: center;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .app-container {\n");
      out.write("            display: flex;\n");
      out.write("            width: 900px;\n");
      out.write("            height: 700px;\n");
      out.write("            background-color: #ffffff;\n");
      out.write("            border-radius: 15px;\n");
      out.write("            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n");
      out.write("            overflow: hidden;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Left sidebar styles */\n");
      out.write("        .sidebar {\n");
      out.write("            width: 35%;\n");
      out.write("            background-color: #f0f2f5;\n");
      out.write("            border-right: 1px solid #e9edef;\n");
      out.write("            display: flex;\n");
      out.write("            flex-direction: column;\n");
      out.write("            overflow: hidden;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .sidebar-header {\n");
      out.write("            padding: 15px;\n");
      out.write("            background-color: #f0f2f5;\n");
      out.write("            border-bottom: 1px solid #e9edef;\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: space-between;\n");
      out.write("            align-items: center;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .sidebar-title {\n");
      out.write("            font-weight: bold;\n");
      out.write("            color: #3b4a54;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .new-room-btn {\n");
      out.write("            background: none;\n");
      out.write("            border: none;\n");
      out.write("            color: #00a884;\n");
      out.write("            font-size: 24px;\n");
      out.write("            cursor: pointer;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .room-list {\n");
      out.write("            flex: 1;\n");
      out.write("            overflow-y: auto;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .room-item {\n");
      out.write("            padding: 12px 15px;\n");
      out.write("            border-bottom: 1px solid #e9edef;\n");
      out.write("            cursor: pointer;\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: space-between;\n");
      out.write("            align-items: center;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .room-item:hover {\n");
      out.write("            background-color: #f5f6f6;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .room-item.active {\n");
      out.write("            background-color: #e9edef;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .room-name {\n");
      out.write("            font-weight: 500;\n");
      out.write("            color: #111b21;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .room-status {\n");
      out.write("            font-size: 12px;\n");
      out.write("            color: #667781;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Right chat area styles */\n");
      out.write("        .chat-area {\n");
      out.write("            width: 65%;\n");
      out.write("            display: flex;\n");
      out.write("            flex-direction: column;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .chat-header {\n");
      out.write("            padding: 15px;\n");
      out.write("            background-color: #f0f2f5;\n");
      out.write("            border-bottom: 1px solid #e9edef;\n");
      out.write("            text-align: center;\n");
      out.write("            font-weight: bold;\n");
      out.write("            color: #3b4a54;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .chat-box {\n");
      out.write("            flex: 1;\n");
      out.write("            padding: 10px;\n");
      out.write("            background-color: #e5ddd5;\n");
      out.write("            background-image: url('https://web.whatsapp.com/img/bg-chat-tile-light_a4be512e7195b6b733d9110b408f075d.png');\n");
      out.write("            overflow-y: auto;\n");
      out.write("            display: flex;\n");
      out.write("            flex-direction: column;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .msg {\n");
      out.write("            max-width: 70%;\n");
      out.write("            padding: 8px 12px;\n");
      out.write("            border-radius: 7.5px;\n");
      out.write("            margin: 5px 0;\n");
      out.write("            word-wrap: break-word;\n");
      out.write("            font-size: 14px;\n");
      out.write("            position: relative;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .msg-left {\n");
      out.write("            background-color: #ffffff;\n");
      out.write("            align-self: flex-start;\n");
      out.write("            border-top-left-radius: 0;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .msg-right {\n");
      out.write("            background-color: #d9fdd3;\n");
      out.write("            align-self: flex-end;\n");
      out.write("            border-top-right-radius: 0;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .chat-input {\n");
      out.write("            display: flex;\n");
      out.write("            padding: 10px;\n");
      out.write("            background-color: #f0f2f5;\n");
      out.write("            gap: 10px;\n");
      out.write("            align-items: center;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        input[type=\"text\"] {\n");
      out.write("            flex: 1;\n");
      out.write("            padding: 10px 15px;\n");
      out.write("            border-radius: 8px;\n");
      out.write("            border: none;\n");
      out.write("            font-size: 14px;\n");
      out.write("            background-color: #ffffff;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .send-btn {\n");
      out.write("            padding: 10px;\n");
      out.write("            border-radius: 50%;\n");
      out.write("            background-color: #00a884;\n");
      out.write("            color: white;\n");
      out.write("            border: none;\n");
      out.write("            cursor: pointer;\n");
      out.write("            width: 40px;\n");
      out.write("            height: 40px;\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: center;\n");
      out.write("            align-items: center;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .send-btn:disabled {\n");
      out.write("            background-color: #aebac1;\n");
      out.write("            cursor: not-allowed;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .system-msg {\n");
      out.write("            text-align: center;\n");
      out.write("            color: #667781;\n");
      out.write("            font-size: 12px;\n");
      out.write("            margin: 10px 0;\n");
      out.write("            font-style: italic;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* New room modal */\n");
      out.write("        .modal {\n");
      out.write("            display: none;\n");
      out.write("            position: fixed;\n");
      out.write("            top: 0;\n");
      out.write("            left: 0;\n");
      out.write("            width: 100%;\n");
      out.write("            height: 100%;\n");
      out.write("            background-color: rgba(0, 0, 0, 0.5);\n");
      out.write("            justify-content: center;\n");
      out.write("            align-items: center;\n");
      out.write("            z-index: 1000;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .modal-content {\n");
      out.write("            background-color: white;\n");
      out.write("            padding: 20px;\n");
      out.write("            border-radius: 10px;\n");
      out.write("            width: 300px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .modal-title {\n");
      out.write("            margin-top: 0;\n");
      out.write("            color: #3b4a54;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .modal-input {\n");
      out.write("            width: 100%;\n");
      out.write("            padding: 10px;\n");
      out.write("            margin: 10px 0;\n");
      out.write("            border: 1px solid #e9edef;\n");
      out.write("            border-radius: 5px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .modal-actions {\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: flex-end;\n");
      out.write("            gap: 10px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .modal-btn {\n");
      out.write("            padding: 8px 15px;\n");
      out.write("            border-radius: 5px;\n");
      out.write("            border: none;\n");
      out.write("            cursor: pointer;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .modal-btn-primary {\n");
      out.write("            background-color: #00a884;\n");
      out.write("            color: white;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .modal-btn-secondary {\n");
      out.write("            background-color: #f0f2f5;\n");
      out.write("            color: #3b4a54;\n");
      out.write("        }\n");
      out.write("        .room-status.Active {\n");
      out.write("            color: #00a884;\n");
      out.write("            font-weight: bold;\n");
      out.write("        }\n");
      out.write("        .room-status.Active {\n");
      out.write("            color: #00a884;\n");
      out.write("            font-weight: bold;\n");
      out.write("        }\n");
      out.write("        .room-status.Available {\n");
      out.write("            color: #667781;\n");
      out.write("        }\n");
      out.write("        .room-status.Error {\n");
      out.write("            color: #ff0000;\n");
      out.write("        }\n");
      out.write("        .room-name {\n");
      out.write("            font-weight: 500;\n");
      out.write("            color: #000000; /* Changed from #111b21 to #000000 for pure black */\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<body>\n");
 if (username == null || username.isEmpty()) { 
      out.write("\n");
      out.write("    <div class=\"app-container\">\n");
      out.write("        <div style=\"width: 100%; text-align: center; padding: 40px;\">\n");
      out.write("            <h2>Session Expired</h2>\n");
      out.write("            <p style=\"color: red;\">Username not found in session.</p>\n");
      out.write("            <p>Please <a href=\"login.jsp\">login again</a>.</p>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
 } else { 
      out.write("\n");
      out.write("         <div class=\"app-container\">\n");
      out.write("             <!-- Left sidebar with all rooms -->\n");
      out.write("             <div class=\"sidebar\">\n");
      out.write("                 <div class=\"sidebar-header\">\n");
      out.write("                     <div class=\"sidebar-title\">Chat Rooms</div>\n");
      out.write("                     <button class=\"new-room-btn\" id=\"newRoomBtn\">+</button>\n");
      out.write("                 </div>\n");
      out.write("                 <div class=\"room-list\" id=\"roomList\">\n");
      out.write("                     <!-- Rooms will be loaded dynamically via JavaScript -->\n");
      out.write("                 </div>\n");
      out.write("             </div>\n");
      out.write("\n");
      out.write("        <!-- Right chat area -->\n");
      out.write("        <div class=\"chat-area\">\n");
      out.write("            ");
 if (currentRoomId == null || currentRoomId.isEmpty()) { 
      out.write("\n");
      out.write("                <div class=\"chat-header\">Select a chat room</div>\n");
      out.write("                <div class=\"chat-box\" style=\"justify-content: center; align-items: center; color: #667781;\">\n");
      out.write("                    <p>Please select a chat room from the sidebar or create a new one</p>\n");
      out.write("                </div>\n");
      out.write("            ");
 } else { 
      out.write("\n");
      out.write("                <div class=\"chat-header\" id=\"chatHeader\">Room: ");
      out.print( currentRoomId );
      out.write("</div>\n");
      out.write("                <div class=\"chat-box\" id=\"chatBox\"></div>\n");
      out.write("                <div class=\"chat-input\">\n");
      out.write("                    <input type=\"text\" id=\"msg\" placeholder=\"Type your message...\" oninput=\"toggleSendButton()\" />\n");
      out.write("                    <button class=\"send-btn\" id=\"sendBtn\" onclick=\"sendMessage()\" disabled>\n");
      out.write("                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n");
      out.write("                            <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line>\n");
      out.write("                            <polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon>\n");
      out.write("                        </svg>\n");
      out.write("                    </button>\n");
      out.write("                </div>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- New Room Modal -->\n");
      out.write("    <div class=\"modal\" id=\"newRoomModal\">\n");
      out.write("        <div class=\"modal-content\">\n");
      out.write("            <h3 class=\"modal-title\">Create New Room</h3>\n");
      out.write("            <input type=\"text\" class=\"modal-input\" id=\"newRoomId\" placeholder=\"Enter room ID\" />\n");
      out.write("            <div class=\"modal-actions\">\n");
      out.write("                <button class=\"modal-btn modal-btn-secondary\" id=\"cancelBtn\">Cancel</button>\n");
      out.write("                <button class=\"modal-btn modal-btn-primary\" id=\"createBtn\">Create</button>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("        var sockets = {};\n");
      out.write("        var currentRoom = \"");
      out.print( currentRoomId );
      out.write("\";\n");
      out.write("        var username = \"");
      out.print( username );
      out.write("\";\n");
      out.write("\n");
      out.write("        // Initialize the app\n");
      out.write("        document.addEventListener('DOMContentLoaded', function() {\n");
      out.write("            // Load rooms from localStorage\n");
      out.write("            loadRooms();\n");
      out.write("\n");
      out.write("            // Highlight current room if one is selected\n");
      out.write("            if (currentRoom && currentRoom !== \"\") {\n");
      out.write("                highlightCurrentRoom(currentRoom);\n");
      out.write("                connectToRoom(currentRoom);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Setup event listeners\n");
      out.write("            setupEventListeners();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("       function loadRooms() {\n");
      out.write("           const roomList = document.getElementById('roomList');\n");
      out.write("           console.log(\"Room list element:\", roomList); // Verify we get the element\n");
      out.write("\n");
      out.write("           const rooms = getRoomsFromStorage();\n");
      out.write("           console.log(\"Rooms from storage:\", rooms); // Verify rooms are loaded\n");
      out.write("\n");
      out.write("           // Clear existing rooms safely\n");
      out.write("           while (roomList.firstChild) {\n");
      out.write("               roomList.removeChild(roomList.firstChild);\n");
      out.write("           }\n");
      out.write("\n");
      out.write("           // Add each room to sidebar\n");
      out.write("           rooms.forEach(room => {\n");
      out.write("               console.log(\"Adding room:\", room); // Verify each room is processed\n");
      out.write("               addRoomToSidebar(room);\n");
      out.write("           });\n");
      out.write("\n");
      out.write("           console.log(\"Final room list children:\", roomList.children); // Verify rooms were added\n");
      out.write("       }\n");
      out.write("       function getRoomsFromStorage() {\n");
      out.write("           try {\n");
      out.write("               const roomsJson = localStorage.getItem('chatRooms');\n");
      out.write("               if (!roomsJson || roomsJson === 'null') {\n");
      out.write("                   // Initialize with default rooms if none exist\n");
      out.write("                   const defaultRooms = ['Self'];\n");
      out.write("                   localStorage.setItem('chatRooms', JSON.stringify(defaultRooms));\n");
      out.write("                   return defaultRooms;\n");
      out.write("               }\n");
      out.write("               return JSON.parse(roomsJson);\n");
      out.write("           } catch (e) {\n");
      out.write("               console.error(\"Error loading rooms from storage:\", e);\n");
      out.write("               return ['Self']; // Fallback to default rooms\n");
      out.write("           }\n");
      out.write("       }\n");
      out.write("\n");
      out.write("\n");
      out.write("        function saveRoomsToStorage(rooms) {\n");
      out.write("            localStorage.setItem('chatRooms', JSON.stringify(rooms));\n");
      out.write("        }\n");
      out.write("\n");
      out.write("         function addRoomToSidebar(roomId) {\n");
      out.write("             const roomList = document.getElementById('roomList');\n");
      out.write("             if (!roomList) {\n");
      out.write("                 console.error(\"Room list element not found!\");\n");
      out.write("                 return;\n");
      out.write("             }\n");
      out.write("\n");
      out.write("             // Check if room already exists\n");
      out.write("             if (document.querySelector(`.room-item[data-room=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${roomId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"]`)) {\n");
      out.write("                 console.log(`Room ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${roomId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" already exists in sidebar`);\n");
      out.write("                 return;\n");
      out.write("             }\n");
      out.write("\n");
      out.write("             console.log(`Creating element for room ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${roomId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\n");
      out.write("             const roomItem = document.createElement('div');\n");
      out.write("             roomItem.className = 'room-item';\n");
      out.write("             roomItem.setAttribute('data-room', roomId);\n");
      out.write("\n");
      out.write("             // Create room name element\n");
      out.write("             const roomName = document.createElement('div');\n");
      out.write("             roomName.className = 'room-name';\n");
      out.write("             roomName.textContent = roomId;\n");
      out.write("             roomName.style.color = '#000000'; // Ensure black color\n");
      out.write("\n");
      out.write("             // Create status element\n");
      out.write("             const roomStatus = document.createElement('div');\n");
      out.write("             roomStatus.className = 'room-status';\n");
      out.write("             roomStatus.id = `status-");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${roomId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`;\n");
      out.write("\n");
      out.write("             // Append elements\n");
      out.write("             roomItem.appendChild(roomName);\n");
      out.write("             roomItem.appendChild(roomStatus);\n");
      out.write("             roomList.appendChild(roomItem);\n");
      out.write("\n");
      out.write("             // Set initial status\n");
      out.write("\n");
      out.write("             // Add click handler\n");
      out.write("             roomItem.addEventListener('click', function() {\n");
      out.write("                 console.log(`Clicked room ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${roomId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\n");
      out.write("                 joinRoom(roomId);\n");
      out.write("             });\n");
      out.write("\n");
      out.write("             console.log(`Added room ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${roomId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" to sidebar`);\n");
      out.write("         }\n");
      out.write("\n");
      out.write("        function setupEventListeners() {\n");
      out.write("            document.getElementById('newRoomBtn').addEventListener('click', openModal);\n");
      out.write("            document.getElementById('cancelBtn').addEventListener('click', closeModal);\n");
      out.write("            document.getElementById('createBtn').addEventListener('click', createNewRoom);\n");
      out.write("\n");
      out.write("            document.getElementById('msg').addEventListener('keypress', function(e) {\n");
      out.write("                if (e.key === 'Enter' && !document.getElementById('sendBtn').disabled) {\n");
      out.write("                    sendMessage();\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            document.getElementById('newRoomId').addEventListener('keypress', function(e) {\n");
      out.write("                if (e.key === 'Enter') {\n");
      out.write("                    createNewRoom();\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function joinRoom(roomId) {\n");
      out.write("            const chatBox = document.getElementById(\"chatBox\");\n");
      out.write("            if (chatBox) {\n");
      out.write("                chatBox.dataset.loaded = \"\";\n");
      out.write("            }\n");
      out.write("            window.location.href = window.location.pathname + '?roomId=' + roomId;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("        function connectToRoom(roomId) {\n");
      out.write("            if (sockets[roomId]) return;\n");
      out.write("\n");
      out.write("            const socket = new WebSocket(\"ws://\" + window.location.host + \"");
      out.print( request.getContextPath() );
      out.write("/chat/\" + roomId + \"?username=\" + encodeURIComponent(username));\n");
      out.write("\n");
      out.write("            sockets[roomId] = socket;\n");
      out.write("\n");
      out.write("            socket.onopen = function () {\n");
      out.write("                addSystemMessage(`🟢 Connected to room ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${roomId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\n");
      out.write("                loadChatHistory(roomId); // 💬 Load chat history\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            socket.onclose = function () {\n");
      out.write("                addSystemMessage(`🔴 Disconnected from room ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${roomId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\n");
      out.write("                delete sockets[roomId];\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            socket.onmessage = function (event) {\n");
      out.write("                displayMessage(event.data);\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            socket.onerror = function (error) {\n");
      out.write("                console.error(\"WebSocket error:\", error);\n");
      out.write("                updateRoomStatus(roomId, \"Error\");\n");
      out.write("            };\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function saveMessageToStorage(roomId, message) {\n");
      out.write("            let allChats = JSON.parse(localStorage.getItem('chatLogs') || '{}');\n");
      out.write("            if (!allChats[roomId]) allChats[roomId] = [];\n");
      out.write("            allChats[roomId].push(message);\n");
      out.write("            localStorage.setItem('chatLogs', JSON.stringify(allChats));\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("        function loadChatHistory(roomId) {\n");
      out.write("            const chatBox = document.getElementById(\"chatBox\");\n");
      out.write("            if (!chatBox) return;\n");
      out.write("\n");
      out.write("            chatBox.innerHTML = \"\"; // Clear old messages\n");
      out.write("\n");
      out.write("            const allChats = JSON.parse(localStorage.getItem('chatLogs') || '{}');\n");
      out.write("            const messages = allChats[roomId] || [];\n");
      out.write("\n");
      out.write("            messages.forEach(msg => {\n");
      out.write("                const messageDiv = document.createElement('div');\n");
      out.write("                messageDiv.classList.add('msg');\n");
      out.write("\n");
      out.write("                const isOwnMessage = msg.startsWith(username + \":\");\n");
      out.write("                messageDiv.classList.add(isOwnMessage ? 'msg-right' : 'msg-left');\n");
      out.write("                messageDiv.textContent = msg;\n");
      out.write("\n");
      out.write("                chatBox.appendChild(messageDiv);\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            chatBox.scrollTop = chatBox.scrollHeight;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("        function updateRoomStatus(roomId, status) {\n");
      out.write("                const statusElement = document.getElementById(`status-");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${roomId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\n");
      out.write("                if (statusElement) {\n");
      out.write("                    statusElement.textContent = status;\n");
      out.write("                    // Remove all status classes\n");
      out.write("                    statusElement.classList.remove('Active', 'Available', 'Error');\n");
      out.write("                    // Add the current status class\n");
      out.write("                    statusElement.classList.add(status);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("        function highlightCurrentRoom(roomId) {\n");
      out.write("            document.querySelectorAll('.room-item').forEach(item => {\n");
      out.write("                item.classList.remove('active');\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            const currentRoomItem = document.querySelector(`.room-item[data-room=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${roomId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"]`);\n");
      out.write("            if (currentRoomItem) {\n");
      out.write("                currentRoomItem.classList.add('active');\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("       function displayMessage(msgText) {\n");
      out.write("           const chatBox = document.getElementById(\"chatBox\");\n");
      out.write("\n");
      out.write("           // Show system messages (don't store them)\n");
      out.write("           if (msgText.startsWith(\"🟢\") || msgText.startsWith(\"🔴\")) {\n");
      out.write("               const systemMsg = document.createElement('div');\n");
      out.write("               systemMsg.className = 'system-msg';\n");
      out.write("               systemMsg.textContent = msgText;\n");
      out.write("               chatBox.appendChild(systemMsg);\n");
      out.write("           } else {\n");
      out.write("               const messageDiv = document.createElement('div');\n");
      out.write("               messageDiv.classList.add('msg');\n");
      out.write("\n");
      out.write("               const isOwnMessage = msgText.startsWith(username + \":\");\n");
      out.write("               messageDiv.classList.add(isOwnMessage ? 'msg-right' : 'msg-left');\n");
      out.write("               messageDiv.textContent = msgText;\n");
      out.write("\n");
      out.write("               chatBox.appendChild(messageDiv);\n");
      out.write("\n");
      out.write("               // Save normal chat to localStorage\n");
      out.write("               saveMessageToStorage(currentRoom, msgText);\n");
      out.write("           }\n");
      out.write("\n");
      out.write("           chatBox.scrollTop = chatBox.scrollHeight;\n");
      out.write("       }\n");
      out.write("\n");
      out.write("\n");
      out.write("        function saveMessageToLocalStorage(roomId, msgText) {\n");
      out.write("            const key = \"chat_\" + roomId;\n");
      out.write("            let chatHistory = JSON.parse(localStorage.getItem(key)) || [];\n");
      out.write("            chatHistory.push(msgText);\n");
      out.write("            localStorage.setItem(key, JSON.stringify(chatHistory));\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("        function sendMessage() {\n");
      out.write("            if (!currentRoom || !sockets[currentRoom]) return;\n");
      out.write("\n");
      out.write("            const msgInput = document.getElementById(\"msg\");\n");
      out.write("            const message = username + \": \" + msgInput.value.trim();\n");
      out.write("\n");
      out.write("            if (message.length <= username.length + 2) return;\n");
      out.write("\n");
      out.write("            sockets[currentRoom].send(message);\n");
      out.write("            msgInput.value = \"\";\n");
      out.write("            toggleSendButton();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function toggleSendButton() {\n");
      out.write("            const msgInput = document.getElementById(\"msg\");\n");
      out.write("            const sendBtn = document.getElementById(\"sendBtn\");\n");
      out.write("            sendBtn.disabled = msgInput.value.trim() === \"\";\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function openModal() {\n");
      out.write("            document.getElementById('newRoomModal').style.display = 'flex';\n");
      out.write("            document.getElementById('newRoomId').focus();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function closeModal() {\n");
      out.write("            document.getElementById('newRoomModal').style.display = 'none';\n");
      out.write("            document.getElementById('newRoomId').value = '';\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function createNewRoom() {\n");
      out.write("            const newRoomId = document.getElementById('newRoomId').value.trim();\n");
      out.write("            if (!newRoomId) {\n");
      out.write("                alert('Please enter a room ID');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Check if room already exists\n");
      out.write("            const rooms = getRoomsFromStorage();\n");
      out.write("            if (rooms.includes(newRoomId)) {\n");
      out.write("                alert('Room already exists');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Add new room to storage\n");
      out.write("            rooms.push(newRoomId);\n");
      out.write("            saveRoomsToStorage(rooms);\n");
      out.write("\n");
      out.write("            // Add to sidebar\n");
      out.write("            addRoomToSidebar(newRoomId);\n");
      out.write("\n");
      out.write("            // Close modal and clear input\n");
      out.write("            closeModal();\n");
      out.write("\n");
      out.write("            // Optionally join the new room automatically\n");
      out.write("            joinRoom(newRoomId);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function addSystemMessage(text) {\n");
      out.write("            const chatBox = document.getElementById(\"chatBox\");\n");
      out.write("            if (!chatBox) return;\n");
      out.write("\n");
      out.write("            const systemMsg = document.createElement('div');\n");
      out.write("            systemMsg.className = 'system-msg';\n");
      out.write("            systemMsg.textContent = text;\n");
      out.write("            chatBox.appendChild(systemMsg);\n");
      out.write("            chatBox.scrollTop = chatBox.scrollHeight;\n");
      out.write("        }\n");
      out.write("    </script>\n");
 } 
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
