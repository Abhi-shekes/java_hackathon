/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.99
 * Generated at: 2025-04-08 11:33:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chatClient_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');

    String username = (String) session.getAttribute("name"); // Get username from session
    String roomId = request.getParameter("roomId");          // Get roomId from URL

      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>Hackathon Chat</title>\n");
      out.write("    <style>\n");
      out.write("        body {\n");
      out.write("            font-family: 'Segoe UI', sans-serif;\n");
      out.write("            background-color: #eae6df;\n");
      out.write("            margin: 0;\n");
      out.write("            padding: 0;\n");
      out.write("            height: 100vh;\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: center;\n");
      out.write("            align-items: center;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .container {\n");
      out.write("            background-color: #ffffff;\n");
      out.write("            width: 400px;\n");
      out.write("            height: 600px;\n");
      out.write("            border-radius: 15px;\n");
      out.write("            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n");
      out.write("            display: flex;\n");
      out.write("            flex-direction: column;\n");
      out.write("            overflow: hidden;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .chat-header {\n");
      out.write("            padding: 15px;\n");
      out.write("            background-color: #075e54;\n");
      out.write("            color: white;\n");
      out.write("            text-align: center;\n");
      out.write("            font-weight: bold;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .chat-box {\n");
      out.write("            flex: 1;\n");
      out.write("            padding: 10px;\n");
      out.write("            background-color: #ece5dd;\n");
      out.write("            overflow-y: auto;\n");
      out.write("            display: flex;\n");
      out.write("            flex-direction: column;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .msg {\n");
      out.write("            max-width: 70%;\n");
      out.write("            padding: 10px 15px;\n");
      out.write("            border-radius: 20px;\n");
      out.write("            margin: 5px 0;\n");
      out.write("            word-wrap: break-word;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .msg-left {\n");
      out.write("            background-color: #ffffff;\n");
      out.write("            align-self: flex-start;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .msg-right {\n");
      out.write("            background-color: #dcf8c6;\n");
      out.write("            align-self: flex-end;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .chat-input {\n");
      out.write("            display: flex;\n");
      out.write("            padding: 10px;\n");
      out.write("            background-color: #f0f0f0;\n");
      out.write("            gap: 10px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        input[type=\"text\"] {\n");
      out.write("            flex: 1;\n");
      out.write("            padding: 10px;\n");
      out.write("            border-radius: 20px;\n");
      out.write("            border: 1px solid #ccc;\n");
      out.write("            font-size: 14px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        button {\n");
      out.write("            padding: 10px 20px;\n");
      out.write("            border-radius: 20px;\n");
      out.write("            background-color: #25d366;\n");
      out.write("            color: white;\n");
      out.write("            border: none;\n");
      out.write("            cursor: pointer;\n");
      out.write("            font-weight: bold;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        button:disabled {\n");
      out.write("            background-color: #9de8c4;\n");
      out.write("            cursor: not-allowed;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("        var socket;\n");
      out.write("\n");
      out.write("        function connect() {\n");
      out.write("            var roomId = \"");
      out.print( roomId );
      out.write("\";\n");
      out.write("            if (!roomId) {\n");
      out.write("                alert(\"Room ID is required.\");\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            socket = new WebSocket(\"ws://\" + window.location.host + \"");
      out.print( request.getContextPath() );
      out.write("/chat/\" + roomId + \"?username=");
      out.print( username );
      out.write("\");\n");
      out.write("\n");
      out.write("            socket.onmessage = function (event) {\n");
      out.write("                var chatBox = document.getElementById(\"chatBox\");\n");
      out.write("                var msgText = event.data;\n");
      out.write("\n");
      out.write("                var messageDiv = document.createElement(\"div\");\n");
      out.write("                messageDiv.classList.add(\"msg\");\n");
      out.write("\n");
      out.write("                if (msgText.startsWith(\"ðŸŸ¢\") || msgText.startsWith(\"ðŸ”´\")) {\n");
      out.write("                    messageDiv.style.textAlign = \"center\";\n");
      out.write("                    messageDiv.style.backgroundColor = \"transparent\";\n");
      out.write("                    messageDiv.style.color = \"#666\";\n");
      out.write("                    messageDiv.style.fontStyle = \"italic\";\n");
      out.write("                    messageDiv.textContent = msgText;\n");
      out.write("                } else {\n");
      out.write("                    var isOwnMessage = msgText.startsWith(\"");
      out.print( username );
      out.write(":\");\n");
      out.write("                    messageDiv.classList.add(isOwnMessage ? \"msg-right\" : \"msg-left\");\n");
      out.write("                    messageDiv.textContent = msgText;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                chatBox.appendChild(messageDiv);\n");
      out.write("                chatBox.scrollTop = chatBox.scrollHeight;\n");
      out.write("            };\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function sendMessage() {\n");
      out.write("            var msgInput = document.getElementById(\"msg\");\n");
      out.write("            var message = \"");
      out.print( username );
      out.write(": \" + msgInput.value.trim();\n");
      out.write("            socket.send(message);\n");
      out.write("            msgInput.value = \"\";\n");
      out.write("            toggleSendButton();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function toggleSendButton() {\n");
      out.write("            var msgInput = document.getElementById(\"msg\");\n");
      out.write("            var sendBtn = document.getElementById(\"sendBtn\");\n");
      out.write("            sendBtn.disabled = msgInput.value.trim() === \"\";\n");
      out.write("        }\n");
      out.write("    </script>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body onload=\"");
 if (username != null && !username.isEmpty() && roomId != null && !roomId.isEmpty()) { 
      out.write("connect();");
 } 
      out.write("\">\n");
      out.write("<div class=\"container\">\n");
      out.write("\n");
      out.write("    ");
 if (username == null || username.isEmpty()) { 
      out.write("\n");
      out.write("        <div class=\"chat-header\">Session Expired</div>\n");
      out.write("        <div class=\"chat-box\" style=\"justify-content: center; align-items: center; color: red;\">\n");
      out.write("            <p style=\"text-align: center;\">Username not found in session.<br>Please <a href=\"login.jsp\">login again</a>.</p>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("    ");
 } else if (roomId == null || roomId.isEmpty()) { 
      out.write("\n");
      out.write("        <div class=\"chat-header\">Join a Room</div>\n");
      out.write("        <div class=\"chat-box\" style=\"justify-content: center; align-items: center;\">\n");
      out.write("            <form method=\"get\" style=\"display: flex; flex-direction: column; gap: 10px; width: 80%;\">\n");
      out.write("                <input type=\"text\" name=\"roomId\" placeholder=\"Enter room ID\" required />\n");
      out.write("                <button type=\"submit\">Join Chat</button>\n");
      out.write("            </form>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        <div class=\"chat-header\">Hello, ");
      out.print( username );
      out.write(" ðŸ‘‹ | Room: ");
      out.print( roomId );
      out.write("</div>\n");
      out.write("        <div class=\"chat-box\" id=\"chatBox\"></div>\n");
      out.write("        <div class=\"chat-input\">\n");
      out.write("            <input type=\"text\" id=\"msg\" placeholder=\"Type your message...\" oninput=\"toggleSendButton()\" />\n");
      out.write("            <button id=\"sendBtn\" onclick=\"sendMessage()\" disabled>Send</button>\n");
      out.write("        </div>\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
